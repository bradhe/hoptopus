<% content_for :title do %>
    <% if is_users_cellar? %>
        your beer cellar
    <% else %>
        <%= @cellar.user.username %>'s beer cellar
    <% end %>
<% end %>

<div class="profile-info clearfix">
  <%= gravatar_for(@cellar.user, :class => "gravatar", :align => 'left', :width => '50px') %>

  <div class="user-info">
    <h2><%= @cellar.user.username %></h2>
    <span class="note"><%= location_str :city => @cellar.user.city, :state => @cellar.user.state, :country => @cellar.user.country %></span>
  </div>
</div>

<% if is_users_cellar? %>
  <% alert 'welcome' do %>
    <h3>Welcome to Hoptopus!</h3>
    <p>There are a few things you can do to get up and running quickly with hoptopus.<p>

    <ul>
      <li><strong>Upload your cellar.</strong> You can import your cellar under the "Upload Cellar" tab below. This
        will help you get your cellar inventory in place quickly so you can start sharing and trading with people.
      </li>
      <li><strong>Browse other peoples' cellars.</strong> See what other people in the hoptopus community are
        cellaring and compare notes on how long you should plan to age your beers.
      </li>
    </ul>
  <% end %>

  <%= alert 'my_cellar' do %>
      This is your cellar! Share it with others: <a href="<%= cellar_url %>"><%= cellar_url %></a>
  <% end %>

  <% if notice %>
      <div class="notice"><%= notice %></div>
  <% end %>
<% end %>

<%= render 'dashboard' %>

<%= render 'list' %>

<% if is_users_cellar? %>
  <h2 data-tab-handle="preferences">Preferences</h2>
  <div id="preferences">
    <%= render 'users/preferences' %>
  </div>

  <div class="hidden">
    <div id="add-beer-form">
      <%= render 'beers/add', :beer => Beer.new(:cellar => @cellar, :cellared_at => Time.now),
                   :url => cellar_beers_path(@cellar),
                   :form_element_prefix => 'beer',
                   :include_form => true,
                   :include_buttons => true %>
    </div>
    <div id="new-tasting-note-form">
      <%= render 'tasting_notes/new', :form_element_prefix => 'tasting_note' %>

      <div class="buttons">
        <button class="cancel">Cancel</button>
        <button class="submit">Create Tasting Note</button>
      </div>
    </div>

    <div id="remove-beers">
      <div class="field">
        <input type="radio" name="remove-type" value="remove" id="remove-cellar-only" checked="checked">
        <label for="remove-cellar-only">Remove from cellar and but keep in cellar history.</label>
        <p class="note">Use this option when you have drank a beer that is in your cellar.</p>
      </div>

      <div class="field">
        <input type="radio" name="remove-type" value="destroy" id="remove-from-history">
        <label for="remove-from-history">Remove from cellar and remove from cellar history.</label>
        <p class="note">Use this option when you accidentally add a beer or the wrong beer to your cellar.</p>
      </div>

      <div class="buttons">
        <button type="button" class="close">Cancel</button>
        <button type="button" class="confirm">Confirm and Remove</button>
      </div>
    </div>

    <%= render 'import' %>
  </div>
<% end %>

<% content_for :javascript do %>
<script type="text/javascript" src="/javascripts/hoptopus.grid.js"></script>
<script type="text/javascript" src="/javascripts/jquery.sortableColumns.js"></script>
<script type="text/javascript" src="/javascripts/jquery.dynamicForm.js"></script>
<script type="text/javascript" src="/javascripts/jquery.pagedDialog.js"></script>

<script type="text/javascript">
function makeSortable() {
    var table = $('#cellared-beers');

    var headers = {};
    table.find('th').each(function(i) {
        if ($(this).hasClass('unsortable')) {
            headers[i] = { sorter: false };
        }
    });

    table.tablesorter({headers: headers});
}

function checkBoxClicked() {
    var checked = $('#cellared-beers input:checkbox').filter(':checked');
    var editBeers = $('#edit-beers');
    var newTastingNote = $('#new-tasting-note');
    var checkOutBeers = $('#check-out-beers');

    if (editBeers.is(':disabled') && checked.length > 0) {
      editBeers.removeAttr('disabled');
    }
    else if(checked.length < 1 && editBeers.is(':enabled')) {
      editBeers.attr('disabled', true);
    }

    // Only one tasting note at a time.
    if(checked.length > 1) {
      newTastingNote.attr('disabled', true);

      if(checkOutBeers.is(':disabled')) {
        checkOutBeers.removeAttr('disabled');
      }
    }
    else if(checked.length > 0) {
      newTastingNote.removeAttr('disabled');
      checkOutBeers.removeAttr('disabled');
    }
    else {
      newTastingNote.attr('disabled', true);
      checkOutBeers.attr('disabled', true);
    }
}

function beerClicked() {
  if($(this).is(':first-child')) {
    return;
  }

  var beerId = $(this).parent().attr('data-beer');
  var beerPath = '<%= cellar_beer_path(@cellar, '%beer_id%') %>'.replace('%beer_id%', beerId); 
  window.location.href = beerPath;
}

$(function() {
  var grid = hoptopus.grid({
    sortable: true,
    table: $('#cellared-beers'),
    columns: <%== @grid_columns.to_json %>,
    nameFormatter: function(obj) { return obj.name; },
    pageSize: 25,
    checkBoxClicked: checkBoxClicked,
    rowClicked: beerClicked
  });

  var beers = <%== active_beers_as_json(@cellar) %>;
  var breweries = <%== @cellar.breweries.to_json %>;
  grid.rowClasses = ['color1', 'color2'];
  grid.init({beers: beers, breweries: breweries});

  $('#new-beer').bind('click', function() {
    var dialog = $('#add-beer-form');
    dialog.dialog({modal:true, width: 'auto', height: 'auto', resizable: false, title: 'Add a Beer to your Cellar'});
    dialog.find('button.close').click(function() {
      dialog.dialog('close');
      return false;
    });

    dialog.find('form').dynamicForm({
       errorListSelector: '#add-beer-form ul.errors',
       submitStart: function() {
           hoptopus.showProgress('Adding Beer...');
       },
       submitDone: function() {
           hoptopus.hideProgress();
       },
       success: function(data) {
           dialog.dialog('close');

           // Add this silly row to the silly thing.
           // TODO: Remove this stupid de-referencing!
           var tr = grid.addSingleObject(data.beer, {front:true});

           // We need to pulse the TR to make it obvious what it is.
           var bg = tr[0].style.backgroundColor;
           tr.effect('highlight', {color:'#85af22'}, 1500);
           dialog.find('form').each(function() { this.reset(); });
           dialog.find('ul.errors').empty();

           hoptopus.showAlert('Beer added.');
       },
       error: function(errors) {
         var ul = dialog.find('ul.errors');
         ul.empty();

         for(var i in errors) {
          if($.isArray(errors[i])) {
            var e = errors[i];

            for(var j = 0; j < e.length; j++) {
              ul.append($('<li/>').text(e[j]));
            }
          }
          else {
            ul.append($('<li/>').text(errors[i]));
          }
         }
       }
    });
  });

  $('#new-tasting-note').bind('click', function() {
    var dialog = $('#new-tasting-note-form');
    dialog.dialog({modal: true, width: 'auto', height: 'auto', resizeable: false, title: 'Add a Tasting Note'});

    dialog.find('button.cancel').click(function() {
      dialog.dialog('close');
    });

    var form = dialog.dynamicForm({
      submitStart: function() {
        hoptopus.showProgress('Adding Tasting Note...');
      },
      submitDone: function() {
        hoptopus.hideProgress();
      },
      success: function(data) {
        dialog.dialog('close');
        dialog.find('input').val('');
        dialog.find('textarea').val('');

        hoptopus.showAlert('Tasting Note Added.');
      }
    });

    var beerId = $('#cellared-beers input:checked').parents('tr[data-beer]').attr('data-beer');
    var tastingNotePath = '<%= cellar_beer_tasting_notes_path(@cellar, '%beer_id%') %>'.replace('%beer_id%', beerId);
    dialog.find('.buttons .submit').click(function() {
      form[0].submit(tastingNotePath);
    });
  });

  $('#clear-filters').click(function(e) { grid.clearFilters(); });

  $('#import-beers').click(function() {
    $('#import-cellar').dialog({modal:true, width: 'auto', height: 'auto', resizable: false, title: 'Import your Beer Collection'});

    $('#import-cellar button.cancel').click(function() {
      $('#import-cellar').dialog('close');
    });
  });

  $('#cellared-beers input:checkbox').click(checkBoxClicked);

  var editCellar = $('#edit-cellar').dynamicForm({
      success: editFormSuccess,
      error: function() {
           alert("An error occured while preparing your beers.");
      },
      submitStart: function () {
          hoptopus.showProgress('Loading...');
      },
      submitDone: function() {
          hoptopus.hideProgress();
      },
      responseType: 'html'
  });

  $('#edit-beers').click(function() {
    editCellar[0].submit('<%= edit_cellar_beers_path(@cellar) %>');
  });

  $('#check-out-beers').click(function() {
      $('#remove-beers').dialog({modal:true, width: 'auto', height: 'auto', resizable: false, title: 'Remove Beer(s) from your Cellar.'});
      $('#remove-beers button.close').click(function() {
        $('#remove-beers').dialog('close');
      });

      $('#remove-beers button.confirm').click(function() {
        var data = {};
        var checkboxes = $('#cellared-beers').find('input:checked');
        var selectedBeers = [];

        for(var i = 0; i < checkboxes.length; i++) {
          if(checkboxes[i] == undefined) {
            continue;
          }

          selectedBeers.push(checkboxes[i].value);
        }

        var method = 'remove';

        // Only delete if this is expclicitly clicked.
        if($('#remove-from-history').is(':checked')) {
          method = 'destroy';
        }

        // Ideally only remove or destroy
        data[method] = selectedBeers;
        data['_method'] = 'DELETE';

        hoptopus.showProgress('Removing beer(s)...');
        $.ajax({
          url: '<%= cellar_beer_path(@cellar) %>',
          type: 'POST',
          data: data,
          success: function(data) {
            // Remove each data point from the thinger.
            hoptopus.hideProgress();

            for(var i = 0; i < data.length; i++) {
              grid.removeObjectById(data[i]);
            }

            grid.repopulateTable();

            var message = "1 beer was removed from your cellar.";

            if(selectedBeers.length > 1) {
              message = selectedBeers.length.toString() + " beers were removed from your cellar.";
            }

            $('#remove-beers').dialog('close');
            hoptopus.showAlert(message);
          },
          error: function() {
            hoptopus.hideProgress();
            hoptopus.showError('Removing beers from your cellar failed. They will remain in your cellar.');
          }
        });
      });
  });

  function editFormSuccess(data) {
    var dialogs = $(data).pagedDialog({ 
      pageSelector: 'div.edit.beer', 
      dialogOptions: { width: 'auto', height: 'auto', modal: true, resizable: false, title: 'Edit Beers'},
      pageChanged: function() {
        $('div.edit.beer:visible').find('input[tabindex=1]').focus();
      }
    });

    var dialog = dialogs[0];
    hoptopus.initJavascriptControls(dialog);

    // Before the previous button lets insert a bunch of buttons.
    var div = $('<div/>').addClass('submit buttons');
    var cancelButton = $('<button/>').text('Cancel').click(function() { dialog.close(); }).attr('type', 'button');
    var submitButton = $('<button/>').text('Save Beers');

    div.append(cancelButton);
    div.append(submitButton);
    $(dialog.prevButton).parent().parent().before(div);

    // Also, this data should be a dynamic form.
    var form = $(dialog.dialog).find('form').first();
    var dynamicForm = $(form).dynamicForm({
      submitStart: function() {
        hoptopus.showProgress('Saving...');
      },
      submitDone: function() {
        submitButton.removeAttr('disabled');
        hoptopus.hideProgress();
      },
      success: function(data) {
        dialog.close();

        var beers = [];
        for(var i = 0; i < data.length; i++) {
          if(data[i].beer == undefined) {
            continue;
          }

          beers.push(data[i].beer);
        }

        if(beers.length > 0) {
          grid.updateObjects(beers);
          grid.repopulateTable();
        }

        hoptopus.showAlert('Beer(s) saved.');
      },
      error: function(errors) {
        // Indirection for great victory!
        errors = errors['errors'];

        var errorsDiv= $('<div/>').addClass('errors').html('Some of your updates contain errors! The beers without errors have been saved and removed.<br/>The beers with errors will remain here. Please fix the errors and try your submit again.');
        errorsDiv.hide();

        $(dialog.dialog).find('div.pages').after(errorsDiv);
        errorsDiv.fadeIn('fast');

        // For each of the errors in the dialog, figure out which ones have errors and which ones don't.
        // then rebuild the links at the bottom of the page.
        var elements = $(dialog.dialog).find('div.edit.beer');
        var l = elements.length;
        for(var i = 0; i < l; i++) {
          var element = elements[i];
          var id = $(element).attr('data-id');

          if(!id) {
              throw "ID attribute missing from page element.";
          }

          if(id in errors) {
            // If there is an errors UL, then empty it and put the errors in. Otherwise,
            // create one and add to the errors.
            var ul = $(element).find('ul.errors') || $('<ul/>').addClass('errors');
            ul.empty();

            for(var j in errors[id]) {
              if($.isArray(errors[id][j])) {
                for(var k = 0; k < errors[id][j].length; k++) {
                  // Ugh...fuck you rails.
                  ul.append($('<li/>').text(errors[id][j][k]));
                }
              }
              else {
                ul.append($('<li/>').text(errors[id][j]));
              }
            }
          }
          else {
            // Not here, just get rid of it.
            $(element).remove();
          }
        }

        // Now rebuild all of the links and show the first page.
        dialog.rebuildLinks($(dialog.dialog).find('div.edit.beer'));

        $(dialog.dialog).find('input, select').one('focus', function() {
          window.setTimeout(function() {
            $(errorsDiv).fadeOut('fast', function() { $(this).remove(); });
          }, 1500);
        });
      }
    });

    submitButton.click(function() {
        $(this).attr('disabled', true);
        return dynamicForm[0].submit('<%= cellar_beers_path(@cellar) %>');
    });
  }
});

    </script>
<% end %>
